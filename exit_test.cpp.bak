#include <iostream>
#include <unistd.h>
#include <sys/wait.h> // Required for wait()

void exitHandler() {
    std::cout << "At exit handler. Restarting...\n";
    pid_t pid = fork();
    
    if (pid == 0) { // Child Process
        char *args[] = {(char*)"./exit_test", NULL};
        execv(args[0], args);
        std::cerr << "Failed to restart\n";
        _exit(1);
    } else if (pid > 0) { // Parent Process
        int status;
        while (!WIFEXITED(status))
            waitpid(pid, &status, 0); // Wait for child to finish
    }
}

int main(int argc, char *argv[]) {
    const int result = std::atexit(exitHandler);
    
    std::cout << "Hello world\n";
  
    return 0; // Triggers atexit
}

